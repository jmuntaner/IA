
(deffunction recargar ()
	(clear)
	(load "ontologia.pont")
	(load-instances "ontologia.pins")
	(load "functions.clp")
	(load "messages.clp")
	(assert (debug))
)

(deffunction cp1a ()
	(assert
		(persona nombre "Mari Flores")
		(persona edad 67)
		(persona sexo Mujer)
		(persona estatura 165)
		(persona peso 59)
		(persona grado-ejercicio alta)
		(persona condiciones (create$))
		(persona preferencias normal)
		(persona estacion Primavera)
	)
)

(deffunction cp1b ()
	(assert
		(persona nombre "Mari Sol")
		(persona edad 67)
		(persona sexo Mujer)
		(persona estatura 165)
		(persona peso 59)
		(persona grado-ejercicio alta)
		(persona condiciones (create$))
		(persona preferencias normal)
		(persona estacion Verano)
	)
)

(deffunction cp1c ()
	(assert
		(persona nombre "Mari Castanya")
		(persona edad 90)
		(persona sexo Mujer)
		(persona estatura 160)
		(persona peso 45)
		(persona grado-ejercicio bajo)
		(persona condiciones (create$))
		(persona preferencias normal)
		(persona estacion Otono)
	)
)

(deffunction cp1d ()
	(assert
		(persona nombre "Mari Nieves")
		(persona edad 90)
		(persona sexo Mujer)
		(persona estatura 160)
		(persona peso 45)
		(persona grado-ejercicio bajo)
		(persona condiciones (create$))
		(persona preferencias normal)
		(persona estacion Invierno)
	)
)

(deffunction cp2a ()
	(assert
		(persona nombre "Elena Nito")
		(persona edad 90)
		(persona sexo Mujer)
		(persona estatura 160)
		(persona peso 45)
		(persona grado-ejercicio bajo)
		(persona condiciones (create$))
		(persona preferencias normal)
		(persona estacion Primavera)
	)
)

(deffunction cp2b ()
	(assert
		(persona nombre "Armando Bronca")
		(persona edad 78)
		(persona sexo Hombre)
		(persona estatura 165)
		(persona peso 55)
		(persona grado-ejercicio medio)
		(persona condiciones (create$))
		(persona preferencias normal)
		(persona estacion Otono)
	)
)


(deffunction cp2c ()
	(assert
		(persona nombre "Igor Dito")
		(persona edad 65)
		(persona sexo Hombre)
		(persona estatura 191)
		(persona peso 117)
		(persona grado-ejercicio alto)
		(persona condiciones (create$))
		(persona preferencias normal)
		(persona estacion Otono)
	)
)

(deffunction cp3 ()
	(assert
		(persona nombre "Lola Mento")
		(persona edad 93)
		(persona sexo Varon)
		(persona estatura 173)
		(persona peso 76)
		(persona grado-ejercicio bajo)
		(persona condiciones (create$ hipertension diabetes insuficiencia-renal colesterol))
		(persona preferencias normal)
		(persona estacion Invierno)
	)
)

(deffunction cp4 ()
	(assert
		(persona nombre "Antonia")
		(persona edad 69)
		(persona sexo Mujer)
		(persona estatura 168)
		(persona peso 71)
		(persona grado-ejercicio medio)
		(persona condiciones (create$ hipertension))
		(persona preferencias vegano)
		(persona estacion Verano)
	)
)

(deffunction cp5 ()
	(assert
		(persona nombre "Consuelo")
		(persona edad 100)
		(persona sexo Mujer)
		(persona estatura 161)
		(persona peso 46)
		(persona grado-ejercicio bajo)
		(persona condiciones (create$ diabetes))
		(persona preferencias pescetariana)
		(persona estacion Otono)
	)
)

(deffunction ejecutar ()
	(load "rules.clp")
	(run)
)

(recargar)
(cp2c)      ; ================== CAMBIAR ESTA LINEA PARA CAMBIAR DE CASO DE PRUEBA =======================
(ejecutar)

(printout t crlf)
(printout t "MEDIDAS DE CALIDAD:" crlf)

(printout t "Necesidades minimas:" crlf)
(send [nmin] print)

(printout t crlf "Necesidades maximas:" crlf)
(send [nmax] print)

(printout t crlf "Exceso o defecto de nutrientes sobre las necesidades, en %:" crlf)
(loop-for-count (?i 1 7) do
	(bind ?d (nth$ ?i ?*DIAS_SEMANA*))
	(printout t crlf ?d ": ")
	(printout t (puntua-nutrientes-debug (nutrientes-dia (nth$ ?i (send [menu] get-dias))) [nmin] [nmax]))
)
